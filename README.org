* About
Kiwi is a simple wiki system similar to the currently defunct couch.it: everyone
can create a new wiki (maybe protected by a password), composed by a set of
pages. No authentication is required, and all the changes are kept permanently.
* Compilation
#+BEGIN_SRC shell
$ cabal install --only-dependencies
$ cabal configure
$ cabal build
#+END_SRC
* Launching
#+BEGIN_SRC shell
$ cabal run &
API listening on port 8000
$ cabal run -- --target=generate
Generating index
#+END_SRC

A static file server should serve the files of the =wiki/= directory, and
redirect the queries (whose url start with =/wiki/=) to the API, listening on
=localhost:8000= by default. The simplest way to do so is to use nginx with a
configuration similar to the following one.

#+BEGIN_SRC conf
server {
  listen 8001;
  server_name localhost;

  location / {
    root   /path/to/kiwi/wiki/;
    index  index;
    default_type text/html;
  }

  location /wiki {
    proxy_pass http://localhost:8000;
  }
}
#+END_SRC

You can also use the target =serverandapi= to use a builtin server for serving
static files, but it seems to induce some bugs, and is thus not advised (at
least until the source of those bugs is identified).
* Architecture
Kiwi has two main components: the *rendering engine* and the *editing
engine*. The *rendering engine* simply generates static html pages from the
description of a wiki; those static pages will be served by a web server,
statically. The *editing engine* has a simple REST API to submit changes to a
page, and once a page has been changed, the rendering engine will be called to
regenerate this page.

The static pages rendered by the rendering engine contains some Javascript code
to call the editing engine.

* API
** Add a wiki
  - URI: =/wiki/<name>=
  - Method: =POST=
  - Return codes:
    - 201 and the wiki URI in case of success
    - 400 if the wiki page name is invalid
    - 409 if the wiki page name is already taken

** Get a wiki page
  - URI: =/wiki/<name>/<pagename>=
  - Method: =GET=
  - Return codes:
    - 200 and a representation of the wiki page
    - 401 if this wiki is protected or the password is incorrect
    - 404 if the page does not exist

# No passwords yet
# If the page is protected, add the =GET= parameter =password=.

** Edit a wiki page
  - URI: =/wiki/<name>/<pagename>=
  - Method: =POST=
  - Input: the page content
  - Return codes:
    - 201 and the page URI in case of success
    - 401 if the page is protected or the password is incorrect
    - 415 if the input is not valid

If the page does not exist, it is created.
If the page is write-protected, add the =POST= parameter =password=.

** Restore a previous version of a wiki page
To do this, simply get the content of the version you want, and set
the current content to this.

* Ideas
  - Locks: when starting to edit a page, you acquire a lock on it,
    that you can keep only a certain amount of time. If someone else
    had the lock, you have to wait until they release it or edit the
    page. This avoids having to deal with conflicts. Every IP can only
    hold a lock for a specific amount of time to avoid blocking
    everybody by constantly acquiring the lock.
  - Use a message queue for regenerating the pages instead of doing
    blocking calls.
  - Another idea? Ping me and we can discuss it.
